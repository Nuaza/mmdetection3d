2023/09/28 09:27:48 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
    CUDA available: True
    numpy_random_seed: 1035866889
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.3, V11.3.109
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.11.0+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0+cu113
    OpenCV: 4.8.0
    MMEngine: 0.8.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1035866889
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/09/28 09:27:49 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
class_names = [
    'car',
    'truck',
    'trailer',
    'bus',
    'construction_vehicle',
    'bicycle',
    'motorcycle',
    'pedestrian',
    'traffic_cone',
    'barrier',
]
data_root = 'data/nuscenes/'
dataset_type = 'NuScenesDataset'
default_hooks = dict(
    checkpoint=dict(interval=-1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='Det3DVisualizationHook'))
default_scope = 'mmdet3d'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
input_modality = dict(use_camera=True, use_lidar=False)
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
metainfo = dict(classes=[
    'car',
    'truck',
    'trailer',
    'bus',
    'construction_vehicle',
    'bicycle',
    'motorcycle',
    'pedestrian',
    'traffic_cone',
    'barrier',
])
model = dict(
    backbone=dict(
        dcn=dict(deform_groups=1, fallback_on_stride=False, type='DCNv2'),
        depth=152,
        frozen_stages=1,
        init_cfg=dict(
            checkpoint='open-mmlab://detectron2/resnet152_caffe',
            type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        stage_with_dcn=(
            False,
            False,
            True,
            True,
        ),
        style='caffe',
        type='mmdet.ResNet'),
    bbox_head=dict(
        attr_branch=(256, ),
        bbox_coder=dict(code_size=9, type='FCOS3DBBoxCoder'),
        center_sampling=True,
        centerness_on_reg=True,
        cls_branch=(256, ),
        conv_bias=True,
        dcn_on_last_conv=True,
        diff_rad_by_sin=True,
        dir_branch=(256, ),
        dir_limit_offset=0,
        dir_offset=0.7854,
        feat_channels=256,
        group_reg_dims=(
            2,
            1,
            3,
            1,
            2,
        ),
        in_channels=256,
        loss_attr=dict(
            loss_weight=1.0, type='mmdet.CrossEntropyLoss', use_sigmoid=False),
        loss_bbox=dict(
            beta=0.1111111111111111,
            loss_weight=1.0,
            type='mmdet.SmoothL1Loss'),
        loss_centerness=dict(
            loss_weight=1.0, type='mmdet.CrossEntropyLoss', use_sigmoid=True),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            type='mmdet.FocalLoss',
            use_sigmoid=True),
        loss_dir=dict(
            loss_weight=1.0, type='mmdet.CrossEntropyLoss', use_sigmoid=False),
        norm_on_bbox=True,
        num_classes=10,
        pred_attrs=True,
        pred_velo=True,
        reg_branch=(
            (256, ),
            (256, ),
            (256, ),
            (256, ),
            (),
        ),
        stacked_convs=2,
        strides=[
            8,
            16,
            32,
            64,
            128,
        ],
        type='FCOSMono3DHead',
        use_direction_classifier=True),
    data_preprocessor=dict(
        bgr_to_rgb=False,
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        pad_size_divisor=32,
        std=[
            1.0,
            1.0,
            1.0,
        ],
        type='Det3DDataPreprocessor'),
    neck=dict(
        add_extra_convs='on_output',
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        relu_before_extra_convs=True,
        start_level=1,
        type='mmdet.FPN'),
    test_cfg=dict(
        max_per_img=200,
        min_bbox_size=0,
        nms_across_levels=False,
        nms_pre=1000,
        nms_thr=0.8,
        score_thr=0.05,
        use_rotate_nms=True),
    train_cfg=dict(
        allowed_border=0,
        code_weight=[
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            0.05,
            0.05,
        ],
        debug=False,
        pos_weight=-1),
    type='FCOSMono3D')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0001),
    paramwise_cfg=dict(bias_decay_mult=0.0, bias_lr_mult=2.0),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=500,
        start_factor=0.3333333333333333,
        type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='nuscenes_infos_val.pkl',
        backend_args=None,
        box_type_3d='Camera',
        data_prefix=dict(
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            pts=''),
        data_root='data/nuscenes/',
        load_type='mv_image_based',
        metainfo=dict(classes=[
            'car',
            'truck',
            'trailer',
            'bus',
            'construction_vehicle',
            'bicycle',
            'motorcycle',
            'pedestrian',
            'traffic_cone',
            'barrier',
        ]),
        modality=dict(use_camera=True, use_lidar=False),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFileMono3D'),
            dict(scale_factor=1.0, type='mmdet.Resize'),
            dict(keys=[
                'img',
            ], type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='NuScenesDataset',
        use_valid_flag=True),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/nuscenes/nuscenes_infos_val.pkl',
    backend_args=None,
    data_root='data/nuscenes/',
    metric='bbox',
    type='NuScenesMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFileMono3D'),
    dict(scale_factor=1.0, type='mmdet.Resize'),
    dict(keys=[
        'img',
    ], type='Pack3DDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        ann_file='nuscenes_infos_train.pkl',
        backend_args=None,
        box_type_3d='Camera',
        data_prefix=dict(
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            pts=''),
        data_root='data/nuscenes/',
        load_type='mv_image_based',
        metainfo=dict(classes=[
            'car',
            'truck',
            'trailer',
            'bus',
            'construction_vehicle',
            'bicycle',
            'motorcycle',
            'pedestrian',
            'traffic_cone',
            'barrier',
        ]),
        modality=dict(use_camera=True, use_lidar=False),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFileMono3D'),
            dict(
                type='LoadAnnotations3D',
                with_attr_label=True,
                with_bbox=True,
                with_bbox_3d=True,
                with_bbox_depth=True,
                with_label=True,
                with_label_3d=True),
            dict(keep_ratio=True, scale=(
                1600,
                900,
            ), type='mmdet.Resize'),
            dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
            dict(
                keys=[
                    'img',
                    'gt_bboxes',
                    'gt_bboxes_labels',
                    'attr_labels',
                    'gt_bboxes_3d',
                    'gt_labels_3d',
                    'centers_2d',
                    'depths',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=False,
        type='NuScenesDataset',
        use_valid_flag=True),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFileMono3D'),
    dict(
        type='LoadAnnotations3D',
        with_attr_label=True,
        with_bbox=True,
        with_bbox_3d=True,
        with_bbox_depth=True,
        with_label=True,
        with_label_3d=True),
    dict(keep_ratio=True, scale=(
        1600,
        900,
    ), type='mmdet.Resize'),
    dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
    dict(
        keys=[
            'img',
            'gt_bboxes',
            'gt_bboxes_labels',
            'attr_labels',
            'gt_bboxes_3d',
            'gt_labels_3d',
            'centers_2d',
            'depths',
        ],
        type='Pack3DDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='nuscenes_infos_val.pkl',
        backend_args=None,
        box_type_3d='Camera',
        data_prefix=dict(
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            pts=''),
        data_root='data/nuscenes/',
        load_type='mv_image_based',
        metainfo=dict(classes=[
            'car',
            'truck',
            'trailer',
            'bus',
            'construction_vehicle',
            'bicycle',
            'motorcycle',
            'pedestrian',
            'traffic_cone',
            'barrier',
        ]),
        modality=dict(use_camera=True, use_lidar=False),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFileMono3D'),
            dict(scale_factor=1.0, type='mmdet.Resize'),
            dict(keys=[
                'img',
            ], type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='NuScenesDataset',
        use_valid_flag=True),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/nuscenes/nuscenes_infos_val.pkl',
    backend_args=None,
    data_root='data/nuscenes/',
    metric='bbox',
    type='NuScenesMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='Det3DLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/fcos3d_r101-caffe-dcn_fpn_head-gn_8xb2-1x_nus-mono3d_finetune'

2023/09/28 09:27:57 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/09/28 09:27:57 - mmengine - INFO - Autoplay mode, press [SPACE] to pause.
2023/09/28 09:27:57 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/09/28 09:28:00 - mmengine - INFO - ------------------------------
2023/09/28 09:28:00 - mmengine - INFO - The length of the dataset: 1938
2023/09/28 09:28:00 - mmengine - INFO - The number of instances per category in the dataset:
+----------------------+--------+
| category             | number |
+----------------------+--------+
| car                  | 6145   |
| truck                | 719    |
| trailer              | 63     |
| bus                  | 478    |
| construction_vehicle | 247    |
| bicycle              | 212    |
| motorcycle           | 252    |
| pedestrian           | 4138   |
| traffic_cone         | 1527   |
| barrier              | 2692   |
+----------------------+--------+
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.lateral_convs.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.lateral_convs.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.lateral_convs.1.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.lateral_convs.1.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.lateral_convs.2.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.lateral_convs.2.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.1.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.1.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.2.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.2.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.3.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.3.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.4.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- neck.fpn_convs.4.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls_prev.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls_prev.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls_prev.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.0.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.0.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.0.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.1.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.1.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.1.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.2.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.2.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.2.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.3.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.3.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.3.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.0.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.0.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.1.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.1.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.2.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.2.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.3.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.3.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.4.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.4.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls_prev.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls_prev.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls_prev.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr_prev.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr_prev.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr_prev.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness_prev.0.conv.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness_prev.0.conv.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness_prev.0.gn.bias:weight_decay=0.0
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness.bias:lr=0.002
2023/09/28 09:28:00 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness.bias:weight_decay=0.0
2023/09/28 09:28:02 - mmengine - INFO - ------------------------------
2023/09/28 09:28:02 - mmengine - INFO - The length of the dataset: 486
2023/09/28 09:28:02 - mmengine - INFO - The number of instances per category in the dataset:
+----------------------+--------+
| category             | number |
+----------------------+--------+
| car                  | 3292   |
| truck                | 163    |
| trailer              | 0      |
| bus                  | 57     |
| construction_vehicle | 0      |
| bicycle              | 62     |
| motorcycle           | 291    |
| pedestrian           | 1529   |
| traffic_cone         | 47     |
| barrier              | 0      |
+----------------------+--------+
2023/09/28 09:28:02 - mmengine - INFO - load model from: open-mmlab://detectron2/resnet152_caffe
2023/09/28 09:28:02 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://detectron2/resnet152_caffe
